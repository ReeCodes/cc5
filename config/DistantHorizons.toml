
[Client]

	#These settings control how the mod will look in game
	[Client.Graphics]

		#These settings control how detailed the fake chunks will be.
		[Client.Graphics.Quality]
			#
			#
			# This indicates how detailed fake chunks will represent 
			# overhangs, caves, floating islands, ect. 
			# Higher options will make the world more accurate, but will increase memory and GPU usage. 
			#
			# LOW: uses at max 2 columns per position. 
			# MEDIUM: uses at max 4 columns per position. 
			# HIGH: uses at max 8 columns per position. 
			#
			# Lowest Quality: LOW Highest Quality: HIGH
			#Allowed Values: LOW, MEDIUM, HIGH
			"Vertical Quality" = "MEDIUM"
			#
			#
			# This indicates how quickly fake chunks decrease in quality the further away they are. 
			# Higher settings will render higher quality fake chunks farther away, 
			# but will increase memory and GPU usage. 
			#
			# LOW: quality drops every 4 chunks. 
			# MEDIUM: quality drops every 8 chunks. 
			# HIGH: quality drops every 16 chunks. 
			#
			# Lowest Quality: LOW Highest Quality: HIGH
			#Allowed Values: LOW, MEDIUM, HIGH
			"Horizontal Scale" = "MEDIUM"
			#
			#
			# This indicates the exponential base of the quadratic drop-off 
			#
			# LOWEST: base 1.0. 
			# LOW: base 1.5. 
			# MEDIUM: base 2.0. 
			# HIGH: base 2.200000047683716. 
			#
			# Lowest Quality: LOWEST Highest Quality: HIGH
			#Allowed Values: LOWEST, LOW, MEDIUM, HIGH
			"Horizontal Quality" = "MEDIUM"
			#
			#
			# What is the maximum detail fake chunks should be drawn at? 
			# Higher settings will increase memory and GPU usage. 
			#
			# CHUNK: render 1 LOD for each Chunk. 
			# HALF_CHUNK: render 4 LODs for each Chunk. 
			# FOUR_BLOCKS: render 16 LODs for each Chunk. 
			# TWO_BLOCKS: render 64 LODs for each Chunk. 
			# BLOCK: render 256 LODs for each Chunk (width of one block). 
			#
			# Lowest Quality: CHUNK Highest Quality: BLOCK
			#Allowed Values: BLOCK, TWO_BLOCKS, FOUR_BLOCKS, HALF_CHUNK, CHUNK
			"Block size" = "BLOCK"
			#
			#
			# The radius of the mod's render distance. (measured in chunks) 
			#
			#Range: 16 ~ 1024
			"Lod Render Distance" = 64

		#Graphics options that are a bit more technical.
		[Client.Graphics.AdvancedGraphics]
			#
			#
			# How should the LODs be drawn? 
			# NOTE: Currently only CUBIC is implemented! 
			# 
			# CUBIC: LOD Chunks are drawn as rectangular prisms (boxes). 
			# TRIANGULAR: LOD Chunks smoothly transition between other. 
			# DYNAMIC: LOD Chunks smoothly transition between each other, 
			#          unless a neighboring chunk is at a significantly different height. 
			#
			#Allowed Values: CUBIC, TRIANGULAR, DYNAMIC
			"LOD Template" = "CUBIC"
			#
			#
			# If false fake chunks behind the player's camera 
			# aren't drawn, increasing GPU performance. 
			#
			# If true all LODs are drawn, even those behind 
			# the player's camera, decreasing GPU performance. 
			#
			# Disable this if you see LODs disappearing at the corners of your vision. 
			#
			"Disable Directional Culling" = true
			#
			#
			# Disable quality falloff, 
			# all fake chunks will be drawn at the highest 
			# available detail level. 
			#
			# WARNING: 
			# This could cause an Out Of Memory crash when using render 
			# distances higher than 128 and will drastically increase GPU usage. 
			#
			"Always Use Max Quality" = false
			#
			#
			# How often should LODs be drawn on top of regular chunks? 
			# HALF and ALWAYS will prevent holes in the world, but may look odd for transparent blocks or in caves. 
			#
			# NEVER: LODs won't render on top of vanilla chunks. 
			# BORDER: LODs will render only on the border of vanilla chunks preventing only some holes in the world. 
			# DYNAMIC: LODs will render on top of distant vanilla chunks to hide delayed loading. 
			#      More effective on higher render distances. 
			#      For vanilla render distances less than or equal to 4 
			#      NEVER or ALWAYS will be used depending on the dimension. 
			# ALWAYS: LODs will render on all vanilla chunks preventing holes in the world. 
			#
			# This setting shouldn't affect performance. 
			#
			#Allowed Values: NEVER, DYNAMIC, ALWAYS, BORDER
			"Vanilla Overdraw" = "DYNAMIC"
			#
			#
			# Will prevent some overdraw issues, but may cause nearby fake chunks to render incorrectly 
			# especially when in/near an ocean. 
			#
			# This setting shouldn't affect performance. 
			#
			"Use Extended Near Clip Plane" = false

		#These settings control the fog quality.
		[Client.Graphics.FogQuality]
			#
			#
			# At what distance should Fog be drawn on the fake chunks? 
			#
			# This setting shouldn't affect performance.
			#Allowed Values: NEAR, FAR, NEAR_AND_FAR
			"Fog Distance" = "FAR"
			#
			#
			# When should fog be drawn? 
			#
			# USE_OPTIFINE_SETTING: Use whatever Fog setting Optifine is using. If Optifine isn't installed this defaults to FOG_ENABLED. 
			# FOG_ENABLED: Never draw fog on the LODs 
			# FOG_DISABLED: Always draw fast fog on the LODs 
			#
			# Disabling fog will improve GPU performance.
			#Allowed Values: USE_OPTIFINE_SETTING, FOG_ENABLED, FOG_DISABLED
			"Fog Draw Mode" = "FOG_ENABLED"
			#
			#
			# What color should fog use? 
			#
			# USE_WORLD_FOG_COLOR: Use the world's fog color. 
			# USE_SKY_COLOR: Use the sky's color. 
			#
			# This setting doesn't affect performance.
			#Allowed Values: USE_WORLD_FOG_COLOR, USE_SKY_COLOR
			"Fog Color Mode" = "USE_WORLD_FOG_COLOR"
			#
			#
			# If true disable Minecraft's fog. 
			#
			# Experimental! Will cause issues with Sodium and 
			# may not play nice with other mods that edit fog. 
			#
			"Experimental Disable Vanilla Fog" = false

	#These settings control how fake chunks outside your normal view range are generated.
	[Client.Generation]
		#
		#
		# In what order should fake chunks be generated outside the vanilla render distance? 
		#
		# FAR_FIRST 
		# Fake chunks are generated from lowest to highest detail 
		# with a small priority for far away regions. 
		# This fills in the world fastest, but you will have large low detail 
		# blocks for a while while the generation happens. 
		#
		# NEAR_FIRST 
		# Fake chunks are generated around the player 
		# in a spiral, similar to vanilla minecraft. 
		# Best used when on a server since we can't generate 
		# fake chunks. 
		#
		# AUTO 
		# Uses FAR_FIRST when on a single player world 
		# and NEAR_FIRST when connected to a server. 
		#
		# This shouldn't affect performance.
		#Allowed Values: AUTO, NEAR_FIRST, FAR_FIRST
		"Generation Priority" = "AUTO"
		#
		#
		# How detailed should fake chunks be generated outside the vanilla render distance? 
		#
		# NONE 
		# Don't run the distance generator. 
		# No CPU usage - Fastest 
		#
		# BIOME_ONLY 
		# Only generate the biomes and use the biome's 
		# grass color, water color, or snow color. 
		# Doesn't generate height, everything is shown at sea level. 
		# Multithreaded - Fastest (2-5 ms) 
		#
		# BIOME_ONLY_SIMULATE_HEIGHT 
		# Same as BIOME_ONLY, except instead 
		# of always using sea level as the LOD height 
		# different biome types (mountain, ocean, forest, etc.) 
		# use predetermined heights to simulate having height data. 
		# Multithreaded - Fastest (2-5 ms) 
		#
		# SURFACE 
		# Generate the world surface, 
		# this does NOT include trees, 
		# or structures. 
		# Multithreaded - Faster (10-20 ms) 
		#
		# FEATURES 
		# Generate everything except structures. 
		# WARNING: This may cause world generation bugs or instability! 
		# Multithreaded - Fast (15-20 ms) 
		#
		# FULL 
		# Ask the local server to generate/load each chunk. 
		# This will show player made structures, which can 
		# be useful if you are adding the mod to a pre-existing world. 
		# This is the most compatible, but causes server/simulation lag. 
		# SingleThreaded - Slow (15-50 ms, with spikes up to 200 ms) 
		#
		# The multithreaded options may increase CPU load significantly (while generating) 
		# depending on how many world generation threads you have allocated. 
		#
		#Allowed Values: NONE, BIOME_ONLY, BIOME_ONLY_SIMULATE_HEIGHT, SURFACE, FEATURES, FULL
		"Distance Generation Mode" = "SURFACE"
		#
		#
		# When using the FEATURES generation mode 
		# some features may not be thread safe, which could 
		# cause instability and crashes. 
		# By default (false) those features are skipped, 
		# improving stability, but decreasing how many features are 
		# actually generated. 
		# (for example: some tree generation is unstable, 
		#               so some trees may not be generated.) 
		# By setting this to true, all features will be generated, 
		# but your game will be more unstable and crashes may occur. 
		#
		# I would love to remove this option and always generate everything, 
		# but I'm not sure how to do that. 
		# If you are a Java wizard, check out the git issue here: 
		# https://gitlab.com/jeseibel/minecraft-lod-mod/-/issues/35 
		#
		"Allow Unstable Feature Generation" = false
		#
		#
		# When generating fake chunks, what blocks should be ignored? 
		# Ignored blocks don't affect the height of the fake chunk, but might affect the color. 
		# So using BOTH will prevent snow covered blocks from appearing one block too tall, 
		# but will still show the snow's color.
		#
		# NONE: Use all blocks when generating fake chunks 
		# NON_FULL: Only use full blocks when generating fake chunks (ignores slabs, lanterns, torches, tall grass, etc.) 
		# NO_COLLISION: Only use solid blocks when generating fake chunks (ignores tall grass, torches, etc.) 
		# BOTH: Only use full solid blocks when generating fake chunks 
		#
		# This wont't affect performance.
		#Allowed Values: NONE, NON_FULL, NO_COLLISION, BOTH
		"Blocks to avoid" = "BOTH"

	#Advanced mod settings
	[Client.Advanced]

		#These settings control how many CPU threads the mod uses for different tasks.
		[Client.Advanced.Threading]
			#
			#
			# How many threads should be used when generating fake chunks outside 
			# the normal render distance? 
			#
			# If you experience stuttering when generating distant LODs, decrease 
			# this number. If you want to increase LOD generation speed, 
			# increase this number. 
			#
			# This and the number of buffer builder threads are independent, 
			# so if they add up to more threads than your CPU has cores, 
			# that shouldn't cause an issue. 
			#
			# The maximum value is the number of logical processors on your CPU. 
			# Requires a restart to take effect. 
			#
			#Range: 1 ~ 8
			numberOfWorldGenerationThreads = 4
			#
			#
			#com.seibel.lod.core.objects.MinDefaultMax@3fd45ebd
			#Range: 1 ~ 8
			numberOfBufferBuilderThreads = 4

		#These settings can be used to look for bugs, or see how certain aspects of the mod work.
		[Client.Advanced.Debugging]
			#
			#
			# If true, the mod is enabled and fake chunks will be drawn. 
			# If false, the mod will still generate fake chunks, 
			# but they won't be rendered. 
			#
			# Disabling rendering will reduce GPU usage 
			#
			"Enable Rendering" = true
			#
			#
			# Should specialized colors/rendering modes be used? 
			#
			# OFF: Fake chunks will be drawn with their normal colors. 
			# SHOW_DETAIL: Fake chunks color will be based on their detail level. 
			# SHOW_DETAIL_WIREFRAME: Fake chunks color will be based on their detail level, drawn as a wireframe. 
			#
			#Allowed Values: OFF, SHOW_DETAIL, SHOW_DETAIL_WIREFRAME
			"Debug Mode" = "OFF"
			#
			#
			# If true the F4 key can be used to cycle through the different debug modes. 
			# and the F6 key can be used to enable and disable LOD rendering.
			"Enable Debug Keybinding" = true

		#These settings affect how often geometry is rebuilt.
		[Client.Advanced.Buffers]
			#
			#
			# What method should be used to upload geometry to the GPU? 
			#
			# AUTO: Picks the best option based on the GPU you have. 
			# BUFFER_STORAGE: Default for NVIDIA if OpenGL 4.5 is supported. 
			#                 Fast rendering, no stuttering. 
			# SUB_DATA: Backup option for NVIDIA. 
			#           Fast rendering but may stutter when uploading. 
			# BUFFER_MAPPING: Slow rendering but won't stutter when uploading. Possibly the best option for integrated GPUs. 
			#                Default option for AMD/Intel. 
			#                May end up storing buffers in System memory. 
			#                Fast rending if in GPU memory, slow if in system memory, 
			#                but won't stutter when uploading.  
			# DATA: Fast rendering but will stutter when uploading. 
			#       Backup option for AMD/Intel. 
			#       Fast rendering but may stutter when uploading. 
			#
			# If you don't see any difference when changing these settings, or the world looks corrupted: 
			# Restart the game to clear the old buffers. 
			#
			#Allowed Values: AUTO, BUFFER_STORAGE, SUB_DATA, BUFFER_MAPPING, DATA
			"GPU Upload Method" = "AUTO"
			#
			#
			# How long should we wait before uploading a buffer to the GPU? 
			# Helpful resource for frame times: https://fpstoms.com 
			#
			# Longer times may reduce stuttering but will make fake chunks 
			# transition and load slower. 
			#
			# NOTE:
			# This should be a last resort option. Only change this from [0], after you have tried all of the 
			# "GPU Upload methods" and determined even the best stutters with yoru hardware.
			#Range: 0 ~ 5000
			"GPU Upload Timeout in Milleseconds" = 0
			#
			#
			# How frequently should vertex buffers (geometry) be rebuilt and sent to the GPU? 
			# Higher settings may cause stuttering, but will prevent holes in the world 
			#
			#Allowed Values: FREQUENT, NORMAL, RARE
			rebuildFrequency = "NORMAL"

